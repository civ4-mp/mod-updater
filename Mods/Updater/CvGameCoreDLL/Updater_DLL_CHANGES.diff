diff --git a/CvGame.cpp b/CvGame.cpp
index e07a98d..73c7df8 100644
--- a/CvGame.cpp
+++ b/CvGame.cpp
@@ -33,6 +33,8 @@
 // Public Functions...
 
 CvGame::CvGame()
+		: m_bUpdaterShown(false)
+		, m_iMainMenuDrawnCounter(0)
 {
 	m_aiRankPlayer = new int[MAX_PLAYERS];        // Ordered by rank...
 	m_aiPlayerRank = new int[MAX_PLAYERS];        // Ordered by player ID...
@@ -749,7 +751,7 @@ void CvGame::assignStartingPlots()
 	int iValue;
 	int iBestValue;
 	int iI, iJ, iK;
-	
+
 	std::vector<int> playerOrder;
 	std::vector<int>::iterator playerOrderIter;
 
@@ -4475,12 +4477,27 @@ void CvGame::sendPlayerOptions(bool bForce)
 	}
 }
 
-
 PlayerTypes CvGame::getActivePlayer() const
 {
 	return GC.getInitCore().getActivePlayer();
 }
 
+PlayerTypes CvGame::getActivePlayerExternal() const
+{
+	if (!m_bUpdaterShown)
+	{
+		CyArgsList argsList;
+		argsList.add(++m_iMainMenuDrawnCounter);
+
+		long lResult = 0;
+		gDLL->getPythonIFace()->callFunction(PYGameModule, "showUpdater", argsList.makeFunctionArgs(), &lResult);
+		if (lResult == 1 || /* Fallback */ m_iMainMenuDrawnCounter > 2048){
+			m_bUpdaterShown = true;
+		}
+	}
+	return GC.getInitCore().getActivePlayer();
+}
+
 
 void CvGame::setActivePlayer(PlayerTypes eNewValue, bool bForceHotSeat)
 {
diff --git a/CvGame.h b/CvGame.h
index fe21e3d..0f319b4 100644
--- a/CvGame.h
+++ b/CvGame.h
@@ -9,6 +9,12 @@
 #include "CvDeal.h"
 #include "CvRandom.h"
 
+// mod-updater
+//#include <iostream>
+#include "CyArgsList.h"
+// mod-updater END
+
+
 class CvPlot;
 class CvCity;
 class CvReplayMessage;
@@ -278,7 +284,19 @@ public:
 	DllExport bool isPlayerOptionsSent() const;
 	DllExport void sendPlayerOptions(bool bForce = false);
 
-	DllExport PlayerTypes getActivePlayer() const;																				// Exposed to Python
+	// mod-updater
+	/* Split getActivePlayer into two cases. The default one for the internal calls
+	   and a second for calls from Civ4's Exe. This allows us to detecting the finishing of
+	   the main menu drawing with a small overhead.
+	   Suggestion from f1rpo, see https://forums.civfanatics.com/threads/replacing-the-custom-game-screen-proof-of-concept.670307/#post-16114837
+
+	   Add ?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ=?getActivePlayerExternal@CvGame@@QBE?AW4PlayerTypes@@XZ
+	   to CvGameCoreDLL.def
+	*/
+	/* DllExport */ PlayerTypes getActivePlayer() const; // Exposed to Python
+	/* DllExport as getActivePlayer() by Def-file */ PlayerTypes getActivePlayerExternal() const;
+	// mod-updater END
+
 	DllExport void setActivePlayer(PlayerTypes eNewValue, bool bForceHotSeat = false);		// Exposed to Python
 	DllExport void updateUnitEnemyGlow();
 
@@ -644,6 +662,11 @@ protected:
 	int		m_iNumCultureVictoryCities;
 	int		m_eCultureVictoryCultureLevel;
 
+	// mod-updater
+	mutable bool m_bUpdaterShown;
+	mutable int m_iMainMenuDrawnCounter;
+	// mod-updater END
+
 	void doTurn();
 	void doDeals();
 	void doGlobalWarming();
@@ -685,6 +708,7 @@ protected:
 	CvPlot* normalizeFindLakePlot(PlayerTypes ePlayer);
 
 	void doUpdateCacheOnTurn();
+
 };
 
 #endif
diff --git a/CvGameCoreDLL.cpp b/CvGameCoreDLL.cpp
index 6a47e53..54d5acf 100644
--- a/CvGameCoreDLL.cpp
+++ b/CvGameCoreDLL.cpp
@@ -4,6 +4,16 @@
 
 #include <new>
 
+// PB Mod
+#include <cstdlib>
+#include <string.h>
+#include <iostream>
+
+#pragma comment(lib, "Ole32.lib")
+#pragma comment(lib, "OleAut32.lib")
+// PB Mod END
+
+
 #include "CvGlobals.h"
 #include "FProfiler.h"
 #include "CvDLLInterfaceIFaceBase.h"
@@ -133,4 +143,146 @@ void stopProfilingDLL()
 	{
 		gDLL->ProfilerEnd();
 	}
-}
\ No newline at end of file
+}
+
+// PB Mod
+
+int StringToWString(std::wstring &ws, const std::string &s)
+{
+	std::wstring wsTmp(s.begin(), s.end());
+	ws = wsTmp;
+	return 0;
+}
+
+int CharToWString(std::wstring &ws, const char *chars)
+{
+	std::string s(chars);
+	return StringToWString(ws, s);
+}
+
+/* Return folder of this DLL/EXE.
+ *
+ * Free returned char after usage! */
+const char *get_dll_folder(){
+
+#define MAX_PARAM 1000
+	//char path[MAX_PARAM];
+	char *path = (char *)calloc( (MAX_PARAM + 1), sizeof(char));
+	path[0] = '\0';
+	HMODULE hm = NULL;
+
+	if (!GetModuleHandleExA( /*0x04 | 0x02*/ GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,
+				(LPCSTR) &get_dll_folder,
+				&hm))
+	{
+		int ret = GetLastError();
+		fprintf(stderr, "GetModuleHandle returned %d\n", ret);
+	}
+	GetModuleFileNameA(hm, path, MAX_PARAM /*sizeof(path)*/);
+
+	// path variable should now contain the full filepath to localFunc
+	// Strip dll filename.
+	char *last_slash = strrchr(path, '\\');
+	*last_slash = '\0';
+	fprintf(stdout, "%s\n", path);
+
+	return path;
+}
+
+/* Wrapper to System libraries to unzip file.
+ *
+ * BSTR is a wchar-array prefixed by its length...
+ * */
+// Ok ==> 0, Error ==> 1
+bool Unzip2Folder( BSTR lpZipFile, BSTR lpFolder)
+{
+//#define LOG(MSG) std::cout << MSG << std::endl;
+#define LOG(MSG) gDLL->logMsg("PythonErr.log", MSG)
+
+	//LOG( ((const TCHAR *)lpZipFile)+1); // nÃ¶...
+	//LOG( ((const TCHAR *)lpFolder)+1);
+
+	IShellDispatch *pISD;
+
+	Folder  *pZippedFile = 0L;
+	Folder  *pDestination = 0L;
+
+	long FilesCount = 0;
+	IDispatch* pItem = 0L;
+	FolderItems *pFilesInside = 0L;
+
+	VARIANT Options, OutFolder, InZipFile, Item;
+	CoInitialize( NULL);
+	__try{
+		if (CoCreateInstance(CLSID_Shell, NULL, CLSCTX_INPROC_SERVER, IID_IShellDispatch, (void **)&pISD) != S_OK){
+			LOG("Instance creation failed.");
+			return 1;
+		}
+
+		InZipFile.vt = VT_BSTR;
+		InZipFile.bstrVal = lpZipFile;
+		pISD->NameSpace( InZipFile, &pZippedFile);
+		if (!pZippedFile)
+		{
+			pISD->Release();
+			LOG("Zip file not found.");
+			return 1;
+		}
+
+		OutFolder.vt = VT_BSTR;
+		OutFolder.bstrVal = lpFolder;
+		pISD->NameSpace( OutFolder, &pDestination);
+		if(!pDestination)
+		{
+			pZippedFile->Release();
+			pISD->Release();
+			LOG("Outfolder argument invalid.");
+			return 1;
+		}
+
+		pZippedFile->Items(&pFilesInside);
+		if(!pFilesInside)
+		{
+			pDestination->Release();
+			pZippedFile->Release();
+			pISD->Release();
+			LOG("Can not create file list.");
+			return 1;
+		}
+
+		pFilesInside->get_Count( &FilesCount);
+		if( FilesCount < 1)
+		{
+			pFilesInside->Release();
+			pDestination->Release();
+			pZippedFile->Release();
+			pISD->Release();
+			LOG("Zip file empty.");
+			return 0;
+		}
+
+		pFilesInside->QueryInterface(IID_IDispatch,(void**)&pItem);
+
+		Item.vt = VT_DISPATCH;
+		Item.pdispVal = pItem;
+
+		Options.vt = VT_I4;
+		Options.lVal = 1024 | 512 | 16 | 4;//http://msdn.microsoft.com/en-us/library/bb787866(VS.85).aspx
+
+		bool retval = pDestination->CopyHere( Item, Options) != S_OK;
+
+		pItem->Release();pItem = 0L;
+		pFilesInside->Release();pFilesInside = 0L;
+		pDestination->Release();pDestination = 0L;
+		pZippedFile->Release();pZippedFile = 0L;
+		pISD->Release();pISD = 0L;
+
+		return retval;
+
+	}__finally
+	{
+		CoUninitialize();
+	}
+}
+
+// PB Mod END
diff --git a/CvGameCoreDLL.h b/CvGameCoreDLL.h
index a807961..e1814ef 100644
--- a/CvGameCoreDLL.h
+++ b/CvGameCoreDLL.h
@@ -13,8 +13,18 @@
 //
 #pragma warning( disable: 4530 )	// C++ exception handler used, but unwind semantics are not enabled
 
+#if 0
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
+
+#else 
+#define WIN32_LEAN_AND_MEAN
+#define _WIN32_WINNT 0x0501
+#include <windows.h>
+#include <shldisp.h> // For BSTR
+
+#endif
+
 #include <MMSystem.h>
 #if defined _DEBUG && !defined USE_MEMMANAGER
 #define USE_MEMMANAGER
@@ -154,6 +164,13 @@ __forceinline float MaxFloat() { return DWtoF(0x7f7fffff); }
 void startProfilingDLL();
 void stopProfilingDLL();
 
+// PB Mod
+int StringToWString(std::wstring &ws, const std::string &s);
+int CharToWString(std::wstring &ws, const char *chars);
+const char *get_dll_folder();
+bool Unzip2Folder( BSTR lpZipFile, BSTR lpFolder);
+// PB Mod End
+
 //
 // Boost Python
 //
diff --git a/CyGame.cpp b/CyGame.cpp
index c7675b4..a4df030 100644
--- a/CyGame.cpp
+++ b/CyGame.cpp
@@ -5,6 +5,8 @@
 #include "CvGameCoreDLL.h"
 #include "CyGame.h"
 #include "CvGameAI.h"
+#include "CvInitCore.h"
+
 #include "CyGlobalContext.h"
 #include "CyPlayer.h"
 //#include "CvEnums.h"
@@ -1153,3 +1155,45 @@ void CyGame::doControl(int iControl)
 		m_pGame->doControl((ControlTypes) iControl);
 	}
 }
+
+std::wstring __mod_path__; // static variable to avoid local one.
+std::wstring CyGame::getModPath()
+{
+	const char *path = get_dll_folder();  
+
+	// Remove lowest folder (\Assets)
+	char *last_slash = strrchr(path, '\\');
+	*last_slash = '\0';
+
+	__mod_path__.clear();
+	int status = CharToWString(__mod_path__, path);
+	return status == 0 ? __mod_path__ : L"";
+}
+
+int CyGame::unzipModUpdate(std::wstring zipFilename)
+{
+	std::wstring out_folder(getModPath());   
+	BSTR out_folder_bstr = SysAllocString(out_folder.c_str());
+	
+#if 0
+	// Manuell konstruieren
+	const char *dll_folder = get_dll_folder();
+	std::string absolute_path = std::string(dll_folder);
+	absolute_path.append("\\");
+	absolute_path.append("Update 1.zip");
+	std::wstring wabsolute_path;
+	StringToWString(wabsolute_path, absolute_path);
+  BSTR z_bstr = SysAllocString(wabsolute_path.c_str()); //=>File not found error
+	free((void *)dll_folder);
+#else
+	//BSTR z_bstr = SysAllocString(L"I:\\Olaf\\Civ4\\Beyond the Sword\\Mods\\PB Mod_v7\\Update 1.zip");//ok
+	BSTR z_bstr = SysAllocString(zipFilename.c_str());
+	//BSTR z_bstr = SysAllocString(L"Z:\\home\\olaf\\Civ4\\Civ4\\Beyond the Sword\\Mods\\PB Mod_v7\\Update 1.zip");
+#endif
+
+	int ret = Unzip2Folder(z_bstr, out_folder_bstr);
+
+	SysFreeString(z_bstr);
+	SysFreeString(out_folder_bstr);
+	return ret;
+}
diff --git a/CyGame.h b/CyGame.h
index d8a8bff..2358aeb 100644
--- a/CyGame.h
+++ b/CyGame.h
@@ -271,6 +271,9 @@ public:
 	bool isEventActive(int /*EventTriggerTypes*/ eTrigger);
 	void doControl(int iControl);
 
+	std::wstring getModPath();
+	int unzipModUpdate(std::wstring zipFilename);
+
 protected:
 	CvGame* m_pGame;
 };
diff --git a/CyGameInterface.cpp b/CyGameInterface.cpp
index b22299c..99fe9f2 100644
--- a/CyGameInterface.cpp
+++ b/CyGameInterface.cpp
@@ -261,6 +261,8 @@ void CyGamePythonInterface()
 
 		.def("isEventActive", &CyGame::isEventActive, "bool (int /*EventTriggerTypes*/ eTrigger)")
 		.def("doControl", &CyGame::doControl, "void (int /*ControlTypes*/ iControl)")
+		.def("getModPath", &CyGame::getModPath, "wstring getModPath() - Return absolute path to folder of used CvGameCoreDLL.dll.")
+		.def("unzipModUpdate", &CyGame::unzipModUpdate, "int (wstring zipFilename) - Unzip file into the Mod installation folder.")
 		;
 
 	python::class_<CyDeal>("CyDeal")
diff --git a/Makefile b/Makefile
index fe7d440..6d8fbfa 100644
--- a/Makefile
+++ b/Makefile
@@ -1,6 +1,7 @@
 #### Civilization 4 SDK Makefile 1.0 ####
 ####  Copyright 2010 Danny Daemonic  ####
 #########################################
+# Debug: magic function: 479A70
 
 #### Paths ####
 #TOOLKIT=C:\Programme\Microsoft Visual C++ Toolkit 2003
@@ -8,9 +9,7 @@ TOOLKIT=I:\Olaf\Microsoft Visual C++ Toolkit 2003
 #PSDK=C:\Programme\Microsoft SDKs\Windows\v7.0A
 PSDK=I:\Olaf\WinSdk
 ## Uncomment to have newly compiled dlls copied to your mod's Assets directory
-#YOURMOD=C:\Users\Danny\Documents\My Games\beyond the sword\MODS\MyMod
-#YOURMOD=H:\Eigene Dateien\My Games\Col\MODS\TAC 2.03_final
-YOURMOD=I:\Olaf\Civ4\Beyond the Sword\Mods\PB Mod_v1
+YOURMOD=I:\Olaf\Civ4\Beyond the Sword\Mods\Updater
 
 #### Tools ####
 CC="$(TOOLKIT)\bin\cl.exe"
@@ -54,7 +53,9 @@ Release_OTHER=Release\CvGameCoreDLL.exp
 #### CFLAGS ####
 GLOBAL_CFLAGS=/GR /Gy /W3 /EHsc /Gd /Gm- /DWIN32 /D_WINDOWS /D_USRDLL /DCVGAMECOREDLL_EXPORTS /Yu"CvGameCoreDLL.h"
 Debug_CFLAGS=/MD /Zi /Od /D_DEBUG /RTC1 /Fp"$(Debug_PCH)" $(GLOBAL_CFLAGS)
-Release_CFLAGS=/MD /O2 /Oy /Oi /G7 /DNDEBUG /DFINAL_RELEASE /Fp"$(Release_PCH)" $(GLOBAL_CFLAGS)
+#Release_CFLAGS=/MD /O2 /Oy /Oi /G7 /DNDEBUG /DFINAL_RELEASE /Fp"$(Release_PCH)" $(GLOBAL_CFLAGS)
+Release_CFLAGS=/MD /O2 /Oy- /Oi /G7 /DNDEBUG /DFINAL_RELEASE /Fp"$(Release_PCH)" $(GLOBAL_CFLAGS)
+
 
 #### LDFLAGS ####
 GLOBAL_LDFLAGS=/DLL /NOLOGO /SUBSYSTEM:WINDOWS /LARGEADDRESSAWARE /TLBID:1
@@ -70,6 +71,9 @@ Release_INCS=$(PROJECT_INCS) $(GLOBAL_INCS)
 #### LIBS ####
 GLOBAL_LIBS=/LIBPATH:"$(TOOLKIT)/lib" /LIBPATH:"$(PSDK)/Lib" winmm.lib user32.lib
 PROJECT_LIBS=/LIBPATH:Python24/libs /LIBPATH:boost-1.32.0/libs/ boost_python-vc71-mt-1_32.lib
+# This expansion is not needed anymore in minimal example mod-updater,	
+# but for PB Mod, etc
+# PROJECT_LIBS=/LIBPATH:Python24/libs /LIBPATH:boost-1.32.0/libs/ boost_python-vc71-mt-1_32.lib thread.obj exceptions.obj condition.obj xtime.obj mutex.obj once.obj recursive_mutex.obj read_write_mutex.obj tss_hooks.obj
 Debug_LIBS=$(PROJECT_LIBS) $(GLOBAL_LIBS) msvcprt.lib
 Release_LIBS=$(PROJECT_LIBS) $(GLOBAL_LIBS)
 
@@ -142,10 +146,10 @@ Release_unfinished:
 		@IF EXIST "Release\%i" DEL "Release\%i"
 
 $(Debug_BIN): $(Debug_LINKOBJS) $(Debug_RESOURCE)
-	$(LD) /out:$(Debug_BIN) $(Debug_LDFLAGS) $(Debug_LIBS) $(Debug_LINKOBJS) $(Debug_RESOURCE)
+	$(LD) /DEF:Updater.def /out:$(Debug_BIN) $(Debug_LDFLAGS) $(Debug_LIBS) $(Debug_LINKOBJS) $(Debug_RESOURCE)
 
 $(Release_BIN): $(Release_LINKOBJS) $(Release_RESOURCE)
-	$(LD) /out:$(Release_BIN) $(Release_LDFLAGS) $(Release_LIBS) $(Release_LINKOBJS) $(Release_RESOURCE)
+	$(LD) /DEF:Updater.def /out:$(Release_BIN) $(Release_LDFLAGS) $(Release_LIBS) $(Release_LINKOBJS) $(Release_RESOURCE)
 
 .cpp{Debug}.obj:
 	@ECHO.>"$*.obj.@"
